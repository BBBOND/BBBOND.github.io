{"title":"SVG命令","slug":"SVG-Usage","date":"2016-11-05T13:51:38.000Z","updated":"2020-02-09T15:22:37.141Z","comments":true,"path":"api/articles/SVG-Usage.json","excerpt":"SVG （可缩放矢量图形）是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由万维网联盟制定，是一个开放标准。详细介绍见百度百科","covers":null,"content":"<p>SVG （可缩放矢量图形）是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由万维网联盟制定，是一个开放标准。详细介绍见<a href=\"http://baike.baidu.com/link?url=FSUJj1_Oo4Utzaq3wDqYAELeQ9oSJUQlh9H5IiDzPPcNl8z3o04jSt5ngHUgrTxeX9iGJK59YOPAaVs9zegv0K\" target=\"_blank\" rel=\"noopener\">百度百科</a></p>\n<a id=\"more\"></a>\n<h2 id=\"可用于路径数据的命令\"><a class=\"header-anchor\" href=\"#可用于路径数据的命令\"></a>可用于路径数据的命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>参数解析</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M X Y</td>\n<td>X,Y 目标绝对坐标点</td>\n<td>将画笔移动到指定的坐标位置，但未发生绘制</td>\n</tr>\n<tr>\n<td>L X Y</td>\n<td>X,Y 目标绝对坐标点</td>\n<td>画直线到指定的坐标位置</td>\n</tr>\n<tr>\n<td>H X</td>\n<td>X 绝对X轴坐标</td>\n<td>画水平线到指定的X轴坐标</td>\n</tr>\n<tr>\n<td>V Y</td>\n<td>Y 绝对Y轴坐标</td>\n<td>画垂直线到指定的Y轴坐标</td>\n</tr>\n<tr>\n<td>C X1 Y1, X2 Y2, ENDX ENDY</td>\n<td>X1,Y1 控制点1坐标，X2,Y2 控制点2坐标，ENDX,ENDY 终点坐标</td>\n<td>三次贝塞尔曲线</td>\n</tr>\n<tr>\n<td>S X2 Y2, ENDX ENDY</td>\n<td>X2,Y2 控制点坐标，ENDX,ENDY 终点坐标</td>\n<td>三次贝塞尔曲线 S命令可以用来创建与之前那些曲线一样的贝塞尔曲线，如果S命令跟在一个C命令或者另一个S命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。如果S命令单独使用，前面没有C命令或者另一个S命令，那么它的两个控制点就会被假设为同一个点。</td>\n</tr>\n<tr>\n<td>Q X Y, ENDX ENDY</td>\n<td>X,Y 起点坐标， ENDX,ENDY终点坐标</td>\n<td>二次贝塞尔曲线</td>\n</tr>\n<tr>\n<td>T ENDX ENDY</td>\n<td>ENDX,ENDY终点坐标</td>\n<td>二次贝塞尔曲线 对称斜率</td>\n</tr>\n<tr>\n<td>A RX RY, XROTATION, FLAG1, FLAG2, X Y</td>\n<td>RX,RY轴半径，XROTATION X轴旋转角度，FLAG1决定弧线是大于还是小于180度，0表示小角度弧，1表示大角度弧， FLAG2 表示弧线的方向，0表示从起点到终点沿逆时针画弧，1表示从起点到终点沿顺时针画弧。</td>\n<td>弧线</td>\n</tr>\n<tr>\n<td>Z</td>\n<td></td>\n<td>关闭路径</td>\n</tr>\n</tbody>\n</table>\n<p>ps: 以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。<br>\npps: 关于贝塞尔曲线，推荐阅读以下网站: <a href=\"http://baike.baidu.com/link?url=oKxj9MUUnFiMi1h6q-3In7YFCiIZeupybZGs0o0IEgO6b6LJ0l3H7ighpreHgqJF4_ywFrvJgYTtjRJhthFa0LylpIFgC-DPWwox3kVygHj_YEPz3z0is3jERVlEIIYl1lEaNcsaOv1eLL648buHY_\" target=\"_blank\" rel=\"noopener\">百度百科</a>、<a href=\"http://www.zhangxinxu.com/wordpress/2014/06/deep-understand-svg-path-bezier-curves-command/\" target=\"_blank\" rel=\"noopener\">深度掌握SVG路径path的贝塞尔曲线指令</a>(之后学习清楚后会整理)</p>\n<h2 id=\"4-4-官方低版本支持\"><a class=\"header-anchor\" href=\"#4-4-官方低版本支持\"></a>4.4 官方低版本支持</h2>\n<ul>\n<li>\n<p>Android最终发布了官方Support包（support-vector-drawable）的VectorDrawableCompat做低版本兼容（最低支持到API 7）</p>\n</li>\n<li>\n<p>所以如果我们使用<code>VectorDrawableCompat</code>加载矢量资源，就不需要再生成png了</p>\n</li>\n<li>\n<p>要在工程中支持低版本的矢量图形和动画，需要<code>support-vector-drawable</code>库和23.2.0+的<code>appcompat-v7</code>库<br>\n（还要取消png生成，支持于android studio1.4）</p>\n</li>\n<li>\n<p><code>compile 'com.android.support:appcompat-v7:23.2.0'</code>编译出<code>support-vector-drawable-23.2.0</code>和<code>animated-vector-drawable-23.2.0</code>这两个库。</p>\n</li>\n<li>\n<p>工程配置方面，<code>VectorDrawableCompat</code>需要依赖aapt的一些功能，来保持最近矢量图使用的添加的属性ID，以便他们可以被v21之前的引用。想要的在<code>build.gradle</code>需要增加一些配置：</p>\n</li>\n<li>\n<p>如果Gradle插件版本V2.0及以上，则需要加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;  </span><br><span class=\"line\">    defaultConfig &#123;  </span><br><span class=\"line\">       vectorDrawables.useSupportLibrary = true  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>集成时需要注意：</p>\n<ul>\n<li>使用<code>android:src</code>属性的地方需要替换为<code>app:srcCompat</code>属性</li>\n<li>在非src属性的地方使用矢量图时，需要将矢量图用drawable容器(如StateListDrawable, InsetDrawable, LayerDrawable, LevelListDrawable, 和RotateDrawable)包裹起来使用，否则会在低版本的情况下报错。<br>\nps: 详细的说明可以参考：<a href=\"http://www.tuicool.com/articles/3emUnmM\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/3emUnmM</a></li>\n</ul>\n</li>\n</ul>\n","more":"<h2 id=\"可用于路径数据的命令\"><a class=\"header-anchor\" href=\"#可用于路径数据的命令\"></a>可用于路径数据的命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>参数解析</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M X Y</td>\n<td>X,Y 目标绝对坐标点</td>\n<td>将画笔移动到指定的坐标位置，但未发生绘制</td>\n</tr>\n<tr>\n<td>L X Y</td>\n<td>X,Y 目标绝对坐标点</td>\n<td>画直线到指定的坐标位置</td>\n</tr>\n<tr>\n<td>H X</td>\n<td>X 绝对X轴坐标</td>\n<td>画水平线到指定的X轴坐标</td>\n</tr>\n<tr>\n<td>V Y</td>\n<td>Y 绝对Y轴坐标</td>\n<td>画垂直线到指定的Y轴坐标</td>\n</tr>\n<tr>\n<td>C X1 Y1, X2 Y2, ENDX ENDY</td>\n<td>X1,Y1 控制点1坐标，X2,Y2 控制点2坐标，ENDX,ENDY 终点坐标</td>\n<td>三次贝塞尔曲线</td>\n</tr>\n<tr>\n<td>S X2 Y2, ENDX ENDY</td>\n<td>X2,Y2 控制点坐标，ENDX,ENDY 终点坐标</td>\n<td>三次贝塞尔曲线 S命令可以用来创建与之前那些曲线一样的贝塞尔曲线，如果S命令跟在一个C命令或者另一个S命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。如果S命令单独使用，前面没有C命令或者另一个S命令，那么它的两个控制点就会被假设为同一个点。</td>\n</tr>\n<tr>\n<td>Q X Y, ENDX ENDY</td>\n<td>X,Y 起点坐标， ENDX,ENDY终点坐标</td>\n<td>二次贝塞尔曲线</td>\n</tr>\n<tr>\n<td>T ENDX ENDY</td>\n<td>ENDX,ENDY终点坐标</td>\n<td>二次贝塞尔曲线 对称斜率</td>\n</tr>\n<tr>\n<td>A RX RY, XROTATION, FLAG1, FLAG2, X Y</td>\n<td>RX,RY轴半径，XROTATION X轴旋转角度，FLAG1决定弧线是大于还是小于180度，0表示小角度弧，1表示大角度弧， FLAG2 表示弧线的方向，0表示从起点到终点沿逆时针画弧，1表示从起点到终点沿顺时针画弧。</td>\n<td>弧线</td>\n</tr>\n<tr>\n<td>Z</td>\n<td></td>\n<td>关闭路径</td>\n</tr>\n</tbody>\n</table>\n<p>ps: 以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。<br>\npps: 关于贝塞尔曲线，推荐阅读以下网站: <a href=\"http://baike.baidu.com/link?url=oKxj9MUUnFiMi1h6q-3In7YFCiIZeupybZGs0o0IEgO6b6LJ0l3H7ighpreHgqJF4_ywFrvJgYTtjRJhthFa0LylpIFgC-DPWwox3kVygHj_YEPz3z0is3jERVlEIIYl1lEaNcsaOv1eLL648buHY_\" target=\"_blank\" rel=\"noopener\">百度百科</a>、<a href=\"http://www.zhangxinxu.com/wordpress/2014/06/deep-understand-svg-path-bezier-curves-command/\" target=\"_blank\" rel=\"noopener\">深度掌握SVG路径path的贝塞尔曲线指令</a>(之后学习清楚后会整理)</p>\n<h2 id=\"4-4-官方低版本支持\"><a class=\"header-anchor\" href=\"#4-4-官方低版本支持\"></a>4.4 官方低版本支持</h2>\n<ul>\n<li>\n<p>Android最终发布了官方Support包（support-vector-drawable）的VectorDrawableCompat做低版本兼容（最低支持到API 7）</p>\n</li>\n<li>\n<p>所以如果我们使用<code>VectorDrawableCompat</code>加载矢量资源，就不需要再生成png了</p>\n</li>\n<li>\n<p>要在工程中支持低版本的矢量图形和动画，需要<code>support-vector-drawable</code>库和23.2.0+的<code>appcompat-v7</code>库<br>\n（还要取消png生成，支持于android studio1.4）</p>\n</li>\n<li>\n<p><code>compile 'com.android.support:appcompat-v7:23.2.0'</code>编译出<code>support-vector-drawable-23.2.0</code>和<code>animated-vector-drawable-23.2.0</code>这两个库。</p>\n</li>\n<li>\n<p>工程配置方面，<code>VectorDrawableCompat</code>需要依赖aapt的一些功能，来保持最近矢量图使用的添加的属性ID，以便他们可以被v21之前的引用。想要的在<code>build.gradle</code>需要增加一些配置：</p>\n</li>\n<li>\n<p>如果Gradle插件版本V2.0及以上，则需要加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;  </span><br><span class=\"line\">    defaultConfig &#123;  </span><br><span class=\"line\">       vectorDrawables.useSupportLibrary = true  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>集成时需要注意：</p>\n<ul>\n<li>使用<code>android:src</code>属性的地方需要替换为<code>app:srcCompat</code>属性</li>\n<li>在非src属性的地方使用矢量图时，需要将矢量图用drawable容器(如StateListDrawable, InsetDrawable, LayerDrawable, LevelListDrawable, 和RotateDrawable)包裹起来使用，否则会在低版本的情况下报错。<br>\nps: 详细的说明可以参考：<a href=\"http://www.tuicool.com/articles/3emUnmM\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/3emUnmM</a></li>\n</ul>\n</li>\n</ul>","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"语言","path":"api/tags/语言.json"}]}